#!/bin/bash

if [ -z "$1" ]; then
 echo "Must pass in project name as an argument"
 return 1
fi

projects_found=false
projects=[]
index=0

for project_path in $WORKSPACE/*; do
    project="$(echo "$project_path" | awk -F/ '{print $5}')"
    if [ "$project" == "$1" ]; then
        break
    else 
        project=""
    fi  
done

if [ -z "$project" ]; then
    echo "Project does not exist"
    return 1
fi  

# determine if branch for argument exists
branch_found=false
cd $HOME/.vim > /dev/null
for branch in $(git branch); do
    if [ "$1" == "$branch" ]; then
        branch_found=true
        git checkout $1 > /dev/null
        break
    fi  
done

if [ "$branch_found" == false ]; then
    echo "Branch not found, using master instead"
    git checkout master > /dev/null
fi  

cd - > /dev/null

current_project="export PROJECT=$project_path"

previous_project="$(cat $HOME/.profile | ag -s 'export PROJECT=')"

# use @ as delimiters for sed
# sed (stream editor) in place replacement and edit file
# search and replace previous project string to new project string
sed -i -e "s@$previous_project@$current_project@g" $HOME/.profile
source $HOME/.profile
